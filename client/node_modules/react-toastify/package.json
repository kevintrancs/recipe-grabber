{
  "_args": [
    [
      {
        "raw": "react-toastify",
        "scope": null,
        "escapedName": "react-toastify",
        "name": "react-toastify",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/ktran/Documents/Recipe/client"
    ]
  ],
  "_from": "react-toastify@latest",
  "_id": "react-toastify@4.1.0",
  "_inCache": true,
  "_location": "/react-toastify",
  "_nodeVersion": "10.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-toastify_4.1.0_1528374001419_0.31469609399262444"
  },
  "_npmUser": {
    "name": "sniphpet",
    "email": "fdkhadra@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "dom-helpers": "3.3.1",
    "loose-envify": "1.4.0",
    "prop-types": "15.6.2",
    "react-lifecycles-compat": "3.0.4"
  },
  "_requested": {
    "raw": "react-toastify",
    "scope": null,
    "escapedName": "react-toastify",
    "name": "react-toastify",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-toastify/-/react-toastify-4.1.0.tgz",
  "_shasum": "0d14d3cf36523ade27a2edd5323a9db373dce4c5",
  "_shrinkwrap": null,
  "_spec": "react-toastify",
  "_where": "/Users/ktran/Documents/Recipe/client",
  "author": {
    "name": "Fadi Khadra",
    "email": "fdkhadra@gmail.com",
    "url": "https://fkhadra.github.io"
  },
  "bugs": {
    "url": "https://github.com/fkhadra/react-toastify/issues"
  },
  "dependencies": {
    "classnames": "^2.2.5",
    "prop-types": "^15.6.0",
    "react-transition-group": "^2.2.1"
  },
  "description": "React notification made easy",
  "devDependencies": {
    "@types/react": "^16.0.18",
    "@types/react-transition-group": "^2.0.6",
    "babel-cli": "^6.26.0",
    "babel-eslint": "^8.0.1",
    "babel-jest": "^21.2.0",
    "babel-loader": "^7.1.2",
    "babel-plugin-transform-object-assign": "^6.22.0",
    "babel-preset-env": "^1.6.0",
    "babel-preset-react-app": "^3.0.3",
    "coveralls": "^3.0.0",
    "cross-env": "^5.1.4",
    "css-loader": "^0.28.11",
    "cssnano": "^3.10.0",
    "cssnano-cli": "^1.0.5",
    "enzyme": "^3.0.0",
    "enzyme-adapter-react-16": "^1.0.0",
    "enzyme-to-json": "^3.2.2",
    "eslint": "^4.7.2",
    "eslint-config-react-app": "^2.0.1",
    "eslint-plugin-flowtype": "^2.37.0",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-jsx-a11y": "^5.1.1",
    "eslint-plugin-react": "^7.4.0",
    "html-webpack-plugin": "^3.1.0",
    "jest": "^21.2.1",
    "jest-cli": "^21.2.1",
    "node-sass": "^4.8.3",
    "postcss": "^6.0.21",
    "postcss-cli": "^5.0.0",
    "prettier": "^1.9.2",
    "raf": "^3.3.2",
    "react": "^16.0.0",
    "react-dom": "^16.0.0",
    "react-test-renderer": "^16.0.0",
    "rimraf": "^2.6.2",
    "style-loader": "^0.20.3",
    "webpack": "^4.2.0",
    "webpack-cli": "^2.0.13",
    "webpack-dev-server": "^3.1.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-pPWzL98EdavmYzm6n6LMrtT6F2d7PVDVrs/dUZZPHN2ASCWcYZReLHp7uFppM952bEwXoopohPSLz6tR2c+nmA==",
    "shasum": "0d14d3cf36523ade27a2edd5323a9db373dce4c5",
    "tarball": "https://registry.npmjs.org/react-toastify/-/react-toastify-4.1.0.tgz",
    "fileCount": 51,
    "unpackedSize": 327077,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbGSLyCRA9TVsSAnZWagAAVzwQAJe0/dLomH2GvQUZZZuu\nxmxVkc87/ZqHZ3qhOweTSu72yeJ+HX+vWCPoO5hbyE7Y1fJR9ui/OTVb1veu\nQSz25KtLHscJ3q+HUeCtvzR56s3WPu1KExXp/CyKnoyDrNo6hSHF9LaACaBZ\nB+fGhXSBcuHi/IYaca0HSsp7c9hdgj7k5752JeXjboqFg5hUbCESk9AjA/Lb\nocMzuV7XWGQqVk7W7XEDHP6tlzRwknHMNJ9L5ZTMaxrLMle4CA6YZwwFlNYX\n05fdxK6r5AcL2cahIti3Z8GDBjpXvvdcQLNfoXo4vxrFLc5+txij1Vm7LSjH\nmDPOTbeRI48sYDzuJLjrM6557jkAt1x1c0HkxtnTtoZmE8ob/9218j42ZBhC\nxZbOmxfLV9YOg0lyyWLQJ7sCWCzx7KzT1kMT7nF2WBUlDd9MS6WeVnnqSgu5\ndM4NQF5LTP5SzcdN8nFUYmKt1whvlFu8/N2524Fh855jhWh3U1gobnu2rOoR\nAZdCHP029P58/z2W4BvBiI4Mbj0aEDclkVdBRp1Eg06pmkpC4kVZyJhBQJW4\nwnFdock9f9QuJ7H631Uf9NqJJNVBf339UD7qc89GwuH+woa3CyZ9kEti2GZa\n3ruoLHQDJcbIVq8BWAv3Btjl8eNP5vsZr+ktOSyiUN7X/Wtr2VbxtYHJiJRY\nw+jO\r\n=D7Gy\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib",
    "dist",
    "src",
    "scss",
    "index.d.ts"
  ],
  "gitHead": "fb6f44f2ba65267f4c7f3223eaae9cbf1e31d552",
  "homepage": "https://github.com/fkhadra/react-toastify#readme",
  "jest": {
    "verbose": true,
    "setupFiles": [
      "raf/polyfill",
      "<rootDir>/setupTests.js"
    ]
  },
  "keywords": [
    "react",
    "notification",
    "toast",
    "react-component",
    "react-toastify",
    "push",
    "alert"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "sniphpet",
      "email": "fdkhadra@gmail.com"
    }
  ],
  "name": "react-toastify",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=15.0.0",
    "react-dom": ">=15.0.0"
  },
  "readme": "# React Toastify [![Build Status](https://travis-ci.org/fkhadra/react-toastify.svg?branch=master)](https://travis-ci.org/fkhadra/react-toastify) [![npm](https://img.shields.io/npm/dm/react-toastify.svg)]() [![npm](https://img.shields.io/npm/v/react-toastify.svg)]() [![license](https://img.shields.io/github/license/fkhadra/react-toastify.svg?maxAge=2592000)]() [![Coverage Status](https://coveralls.io/repos/github/fkhadra/react-toastify/badge.svg?branch=master)](https://coveralls.io/github/fkhadra/react-toastify?branch=master)\n\n![React toastify](https://user-images.githubusercontent.com/5574267/35336500-e58f35b6-0118-11e8-800b-2da6594fc700.gif \"React toastify\")\n\n\n🎉 React-Toastify allow you to add notification to your app with ease. No bullshit !\n\n* [Demo](#demo)\n* [Installation](#installation)\n* [Features](#features)\n* [Migrate from v3 to v4](#from-v3-to-v4)\n* [Usage](#usage)\n  + [One component to rule them all](#one-component-to-rule-them-all)\n  + [Positioning toast](#positioning-toast)\n  + [Set autoclose delay or disable it](#set-autoclose-delay-or-disable-it)\n  + [Render a component](#render-a-component)\n  + [Remove a toast programmatically](#remove-a-toast-programmatically)\n  + [Prevent duplicate](#prevent-duplicate)\n  + [Update a toast](#update-a-toast)\n    - [Basic example](#basic-example)\n    - [Update the content](#update-the-content)\n    - [Apply a transition](#apply-a-transition)\n    - [Reset option or inherit from ToastContainer](#reset-option-or-inherit-from-toastcontainer)\n  + [Define callback](#define-callback)\n  + [Listen for change](#listen-for-change)\n  + [Set a custom close button or simply remove it](#set-a-custom-close-button-or-simply-remove-it)\n    - [Override the default one](#override-the-default-one)\n    - [Define it per toast](#define-it-per-toast)\n    - [Remove it](#remove-it)\n  + [Add an undo option to a toast like google drive](#add-an-undo-option-to-a-toast-like-google-drive)\n  + [Replace the default transition](#replace-the-default-transition)\n  + [Define a custom enter and exit transition](#define-a-custom-enter-and-exit-transition)\n    - [Ease your life with the cssTransition helper](#ease-your-life-with-the-csstransition-helper)\n      * [Handle transition based on the toast position](#handle-transition-based-on-the-toast-position)\n    - [Create a transition from scratch](#create-a-transition-from-scratch)\n  + [Swipe to remove](#swipe-to-remove)\n    - [Define the width percentage to remove the toast](#define-the-width-percentage-to-remove-the-toast)\n    - [Disable it](#disable-it)\n  + [Le style](#le-style)\n    - [style with css classes](#style-with-css-classes)\n    - [style with glamor](#style-with-glamor)\n    - [Define style globally](#define-style-globally)\n    - [Right to left support](#right-to-left-support)\n  + [Mobile](#mobile)\n* [Api](#api)\n  + [ToastContainer](#toastcontainer)\n  + [toast](#toast)\n  + [cssTransition](#csstransition)\n* [Browser Support](#browser-support)\n* [Release Notes](#release-notes)\n* [Contribute](#contribute)\n* [License](#license)\n\n## Demo\n\n[A demo is worth thousand word](https://fkhadra.github.io/react-toastify/)\n\n## Installation\n\n```\n$ npm install --save react-toastify\n$ yarn add react-toastify\n```\n\n## Features\n\n- Easy to setup for real, you can make it works in less than 10sec!\n- Super easy to customize\n- RTL support\n- Swipe to close 👌\n- Can display a react component inside the toast!\n- Has ```onOpen``` and ```onClose``` hooks. Both can access the props passed to the react component rendered inside the toast\n- Can remove a toast programmatically\n- Define behavior per toast\n- ~~Pause toast when the browser is not visible thanks to visibility API~~ Need to fix it\n- Fancy progress bar to display the remaining time\n- Possibility to update a toast\n\n## From v3 to v4\n\nGlamor has been dropped to switch back to scss due to user's feedback. You can read more about that choice if you take a look at the issues history.\n- Passing glamor rule to className is still working 😎. \n- A css file needs to be imported now.\n- Toast are now draggable, you can swipe to close\n- New built-in transition added\n- Playground for contributor\n- You may use glamorous or any other css-in-js library that relies on glamor. (Haven't been tested)\n\n## Usage\n\n### One component to rule them all\n\nThe toasts inherit ToastContainer's props. **Props defined on toast supersede ToastContainer's props.**\n\n```javascript\n  import React, { Component } from 'react';\n  import { ToastContainer, toast } from 'react-toastify';\n  import 'react-toastify/dist/ReactToastify.css';\n  // minified version is also included\n  // import 'react-toastify/dist/ReactToastify.min.css';\n\n  class App extends Component {\n    notify = () => toast(\"Wow so easy !\");\n\n    render(){\n      return (\n        <div>\n        <button onClick={this.notify}>Notify !</button>\n          <ToastContainer />\n        </div>\n      );\n    }\n  }\n```\n\n### Positioning toast\n\nBy default, all the toasts will be positionned on the top right of your browser. If a position is set on a toast, the one defined on ToastContainer will be replaced.\n\nThe following values are allowed: **top-right, top-center, top-left, bottom-right, bottom-center, bottom-left**\n\nFor convenience, toast expose a POSITION property to avoid any typo.\n\n```javascript\n // toast.POSITION.TOP_LEFT, toast.POSITION.TOP_RIGHT, toast.POSITION.TOP_CENTER\n // toast.POSITION.BOTTOM_LEFT,toast.POSITION.BOTTOM_RIGHT, toast.POSITION.BOTTOM_CENTER\n\n  import React, { Component } from 'react';\n  import { toast } from 'react-toastify';\n\n  class Position extends Component {\n    notify = () => {\n    toast(\"Default Notification !\");\n\n    toast.success(\"Success Notification !\", {\n      position: toast.POSITION.TOP_CENTER\n    });\n\n    toast.error(\"Error Notification !\", {\n      position: toast.POSITION.TOP_LEFT\n    });\n    \n    toast.warn(\"Warning Notification !\", {\n      position: toast.POSITION.BOTTOM_LEFT\n    });\n\n    toast.info(\"Info Notification !\", {\n      position: toast.POSITION.BOTTOM_CENTER\n    });\n\n    toast(\"Custom Style Notification with css class!\", {\n      position: toast.POSITION.BOTTOM_RIGHT,\n      className: 'foo-bar'\n    });\n  };\n\n    render(){\n      return <button onClick={this.notify}>Notify</button>;\n    }\n  }\n```\n\n### Set autoclose delay or disable it\n\n- Set the default delay\n\n```js\n  import React from 'react';\n  import { ToastContainer } from 'react-toastify';\n\n  // close toast after 8 seconds\n  const App = () => (\n    <ToastContainer autoClose={8000} />\n  );\n```\n\n- Set the delay per toast for more control\n\n```js\n  import React from 'react';\n  import { ToastContainer, toast } from 'react-toastify';\n\n  class App extends Component {\n    closeAfter15 = () => toast(\"YOLO\", { autoClose: 15000 });\n\n    closeAfter7 = () => toast(\"7 Kingdoms\", { autoClose: 7000 });\n\n    render(){\n      return (\n        <div>\n          <button onClick={this.closeAfter15}>Close after 15 seconds</button>\n          <button onClick={this.closeAfter7}>Close after 7 seconds</button>\n          <ToastContainer autoClose={8000} />\n        </div>\n      );\n    }\n  }\n```\n\n- Disable it by default\n\n```js\n    <ToastContainer autoClose={false} />\n```\n\n- Disable it per toast\n\n```js\n    toast(\"hello\", {\n      autoClose: false\n    })\n```\n\n### Render a component\n\nWhen you render a component, a `closeToast` function is passed as a props. That way you can close the toast on user interaction for example.\n\n```js\nimport React from 'react';\nimport { ToastContainer, toast } from \"react-toastify\";\n\nconst Msg = ({ closeToast }) => (\n  <div>\n    Lorem ipsum dolor\n    <button>Retry</button>\n    <button onClick={closeToast}>Close</button>\n  </div>\n)\n\nconst App = () => (\n  <div>\n    <button onClick={() => toast(<Msg />)}>Hello 😀</button>\n    <ToastContainer />\n  </div>\n);\n```\n\nYou can also render a component using a function. More or less like a \"render props\":\n\n```js\ntoast(({ closeToast }) => <div>Functional swag 😎</div>);\n```\n\n### Remove a toast programmatically\n\nAn id is returned each time you display a toast, use it to remove a given toast programmatically by calling ```toast.dismiss(id)```\n\nWithout args, all the displayed toasts will be removed.\n\n```javascript\n  import React, { Component } from 'react';\n  import { toast } from 'react-toastify';\n\n  class Example extends Component {\n    toastId = null;\n\n    notify = () => this.toastId = toast(\"Lorem ipsum dolor\");\n\n    dismiss = () =>  toast.dismiss(this.toastId);\n\n    dismissAll = () =>  toast.dismiss();\n\n    render(){\n      return (\n        <div>\n          <button onClick={this.notify}>Notify</button>\n          <button onClick={this.dismiss}>Dismiss</button>\n          <button onClick={this.dismissAll}>Dismiss All</button>\n        </div>\n      );\n    }\n  }\n```\n\n### Prevent duplicate\n\nTo prevent duplicates, you can check if a given toast is active by calling `toast.isActive(id)` like the snippet below. With this approach, you can decide with more precision whether or not you want to display a toast.\n\n```javascript\n  import React, { Component } from 'react';\n  import { toast } from 'react-toastify';\n\n  class Example extends Component {\n    toastId = null;\n\n    notify = () => {\n      if (! toast.isActive(this.toastId)) {\n        this.toastId = toast(\"I cannot be duplicated !\");\n      }\n    }\n\n    render(){\n      return (\n        <div>\n          <button onClick={this.notify}>Notify</button>\n        </div>\n      );\n    }\n  }\n```\n\n### Update a toast\n\nWhen you update a toast, the toast options and the content are inherited but don't worry you can update them.\n\n![update-without-transition](https://user-images.githubusercontent.com/5574267/33761953-1ce2e0ea-dc0b-11e7-8967-a63c1185ce0e.gif)\n\n#### Basic example \n\n```js\nimport React, { Component } from 'react';\nimport { toast } from 'react-toastify';\n\nclass Update extends Component {\n  toastId = null;\n\n  notify = () => this.toastId = toast(\"Hello\", { autoClose: false });\n\n  update = () => toast.update(this.toastId, { type: toast.TYPE.INFO, autoClose: 5000 });\n  \n  render(){\n      return (\n        <div>\n          <button onClick={this.notify}>Notify</button>\n          <button onClick={this.update}>Update</button>\n        </div>\n      )\n  }\n}\n```\n\n#### Update the content\n\nIf you want to change the content it's straightforward as well. You can render any valid element including a react component. Pass your value to a `render` option as follow:\n\n```js\n // With a string\n toast.update(this.toastId, { \n    render: \"New content\"\n    type: toast.TYPE.INFO,\n    autoClose: 5000 \n  });\n \n// Or with a component\ntoast.update(this.toastId, { \n    render: <MyComponent />\n    type: toast.TYPE.INFO,\n    autoClose: 5000 \n  });\n\n\n```\n\n#### Apply a transition\n\nBy default, when you update a toast, there is no transition applied. If you want to apply a transition, it can be done via the `className` or the `transition` option:\n\n![update-with-transition](https://user-images.githubusercontent.com/5574267/33761952-1cc9d55a-dc0b-11e7-9a05-29186ea1c1f0.gif)\n\n```js\n// with css\ntoast.update(this.toastId, {\n  render: \"New Content\",\n  type: toast.TYPE.INFO,\n  //Here the magic\n  className: 'rotateY animated'\n})\n\n// with glamor\ntoast.update(this.toastId, {\n  render: \"New Content\",\n  type: toast.TYPE.INFO,\n  //Here the magic\n  className: css({\n    transform: \"rotateY(360deg)\",\n    transition: \"transform 0.6s\"\n  })\n})\n\n// with transition\ntoast.update(this.toastId, {\n  render: \"New Content\",\n  type: toast.TYPE.INFO,\n  //Here the magic\n  transition: Rotate\n})\n\n```\n\n#### Reset option or inherit from ToastContainer\n\nIf you want to inherit props from the `ToastContainer`, you can reset an option by passing null. \nIt's particulary usefull when you remove the `closeButton` from a toast and you want it back during the update:\n\n```js\nclass Update extends Component {\n  toastId = null;\n\n  notify = () => this.toastId = toast(\"Hello\", { \n      autoClose: false,\n      closeButton: false // Remove the closeButton \n    });\n\n  update = () => toast.update(this.toastId, { \n      type: toast.TYPE.INFO,\n      autoClose: 5000,\n      closeButton: null // The closeButton defined on ToastContainer will be used\n    });\n  \n  render(){\n      return (\n        <div>\n          <button onClick={this.notify}>Notify</button>\n          <button onClick={this.update}>Update</button>\n        </div>\n      )\n  }\n}\n```\n\n### Define callback\n\nYou can define two callback on toast. They are really useful when the toast are not used only to display messages.\n\n- onOpen is called inside componentDidMount\n- onClose is called inside componentWillUnmount\n\n```javascript\n  import React, { Component } from 'react';\n  import { toast } from 'react-toastify';\n\n  class Hook extends Component {\n    notify = () => toast(<MyComponent foo=\"bar\" />, {\n      onOpen: ({ foo }) => window.alert('I counted to infinity once then..'),\n      onClose: ({ foo }) => window.alert('I counted to infinity twice')\n    });\n\n    render(){\n      return <button onClick={this.notify}>Notify</button>;\n    }\n  }\n```\n\n### Listen for change\n\nIf you want to know when a toast is displayed or removed, `toast` expose a `onChange` method:\n\n```js\ntoast.onChange( numberOfToastDisplayed => {\n  // Do whatever you want\n});\n```\n\n### Set a custom close button or simply remove it\n\n#### Override the default one\n\nYou can pass a custom close button to the `ToastContainer` to replace the default one.\n\n⚠️ **When you use a custom close button, your button will receive a ```closeToast``` function.\nYou need to call it in order to close the toast.** ⚠️\n\n```javascript\n  import React, { Component } from 'react';\n  import { toast, ToastContainer } from 'react-toastify';\n\n  const CloseButton = ({ YouCanPassAnyProps, closeToast }) => (\n    <i\n      className=\"material-icons\"\n      onClick={closeToast}\n    >\n    delete\n    </i>\n  );\n\n  class CustomClose extends Component {\n    notify = () => {\n      toast(\"The close button change when Chuck Norris display a toast\");\n    };\n\n    render(){\n      return (\n        <div>\n          <button onClick={this.notify}>Notify</button>;\n          <ToastContainer closeButton={<CloseButton YouCanPassAnyProps=\"foo\" />} />\n        </div>\n      );\n    }\n  }\n```\n\n#### Define it per toast\n\n```javascript\n  import React, { Component } from 'react';\n  import { toast } from 'react-toastify';\n\n  // Let's use the closeButton we defined on the previous example\n  class CustomClose extends Component {\n    notify = () => {\n      toast(\"The close button change when Chuck Norris display a toast\",{\n        closeButton: <CloseButton YouCanPassAnyProps=\"foo\" />\n      });\n    };\n\n    render(){\n      return <button onClick={this.notify}>Notify</button>;\n    }\n  }\n```\n\n#### Remove it\n\nSometimes you don't want to display a close button. It can be removed globally or per toast. Pass\n`false` to `closeButton` props:\n\n- remove it by default\n\n```js\n    <ToastContainer closeButton={false} />\n```\n\n- remove it per toast\n\n```js\n    toast(\"hello\", {\n      closeButton: false\n    })\n```\n\n### Add an undo option to a toast like google drive\n\nSee it in action:\n\n[![Edit l2qkywz7xl](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/l2qkywz7xl)\n\n```javascript\nconst ToastUndo = ({ id, undo, closeToast }) => {\n  function handleClick(){\n    undo(id);\n    closeToast();\n  }\n\n  return (\n    <div>\n      <h3>\n        Row Deleted <button onClick={handleClick}>UNDO</button>\n      </h3>\n    </div>\n  );\n}\n\nclass App extends Component {\n  state = {\n    collection: data,\n    // Buffer\n    toRemove: []\n  };\n\n  // Remove the row id from the buffer\n  undo = id => {\n    this.setState({\n      toRemove: this.state.toRemove.filter(v => v !== id)\n    });\n  }\n\n  // Remove definetly\n  cleanCollection = () => this.setState({\n    // Return element which are not included in toRemove\n    collection: this.state.collection.filter(v => !this.state.toRemove.includes(v.id)),\n    //Cleanup the buffer\n    toRemove: []\n  });\n\n   // Remove row from render process\n   // then display the toast with undo action available\n  removeRow = e => {\n    const id = e.target.dataset.rowId;\n    this.setState({\n      toRemove: [...this.state.toRemove, id]\n    });\n    toast(<ToastUndo undo={this.undo} id={id} />, {\n      // hook will be called whent the component unmount\n      onClose: this.cleanCollection\n    });\n  };\n\n  renderRows() {\n    const { collection, toRemove } = this.state;\n\n    // Render all the element wich are not present in toRemove\n    // Im using data-attribute to grab the row id\n    return collection.filter(v => !toRemove.includes(v.id)).map(v => (\n      <tr key={v.id}>\n        <td>{v.firstName}</td>\n        <td>{v.lastName}</td>\n        <td>{v.email}</td>\n        <td>\n          <button onClick={this.removeRow} data-row-id={v.id}>\n            Delete\n          </button>\n        </td>\n      </tr>\n    ));\n  }\n\n  render() {\n    // Dont close the toast on click\n    return (\n      <div style={styles}>\n        <table>\n        <tbody>\n          <tr>\n            <th>name</th>\n            <th>firstname</th>\n            <th>gender</th>\n            <th />\n          </tr>\n          {this.renderRows()}\n          </tbody>\n        </table>\n        <ToastContainer closeOnClick={false} />\n      </div>\n    );\n  }\n}\n```\n\n### Replace the default transition\n\nThere is 4 built-in transition provided:\n\n<details>\n  <summary>Bounce</summary>\n  <img src =\"https://user-images.githubusercontent.com/5574267/38770379-985f49c8-4012-11e8-9db1-5d4d1f26a3d5.gif\" />\n</details>\n\n<details>\n  <summary>Slide</summary>\n  <img src =\"https://user-images.githubusercontent.com/5574267/38770381-98a81d24-4012-11e8-8011-1190f3fb17c3.gif\" />\n</details>\n\n<details>\n  <summary>Zoom</summary>\n  <img src =\"https://user-images.githubusercontent.com/5574267/38770382-98c16342-4012-11e8-9abf-3cf3d3eabd8c.gif\" />\n</details>\n<details>\n  <summary>Flip</summary>\n  <img src =\"https://user-images.githubusercontent.com/5574267/38770380-9877dde4-4012-11e8-9485-0dc43346ce30.gif\" />\n</details>\n\nBounce is used by default but you can replace it by your own transition or by one of the list above:\n \n\n```js\nimport { Slide, Zoom, Flip, Bounce } from 'react-toastify';\n\n  <ToastContainer\n    transition={Slide}\n  />\n//...\n  <ToastContainer\n    transition={YourCustomTransition}\n  />\n    \n```\nYou get the idea...\n\n### Define a custom enter and exit transition\n\nThe toast relies on `react-transition-group` for the enter and exit transition. Any transition built with react-transition-group should work !\n\n![toastify_custom_trans](https://user-images.githubusercontent.com/5574267/31049179-0d52e14c-a62e-11e7-9abd-b0d169a0fadc.gif)\n\n\nI'll use the zoom animation from animate.css. Of course, you could create your own animation.\n\n```css\n/* style.css*/\n@keyframes zoomIn {\n  from {\n    opacity: 0;\n    transform: scale3d(.3, .3, .3);\n  }\n\n  50% {\n    opacity: 1;\n  }\n}\n\n.zoomIn {\n  animation-name: zoomIn;\n}\n\n@keyframes zoomOut {\n  from {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: 0;\n    transform: scale3d(.3, .3, .3);\n  }\n\n  to {\n    opacity: 0;\n  }\n}\n\n.zoomOut {\n  animation-name: zoomOut;\n}\n\n/* Not needed with the cssTransition helper */\n\n.animate {\n  animation-duration: 800ms;\n}\n```\n\n#### Ease your life with the cssTransition helper\n\nThe easiest way to roll your own transition is by using the `cssTransition` helper. Doing so you don't need to deal with `react-transition-group`. You only need to provide the `enter` and the `exit` class name, the transition `duration` is set\nto `750ms` by default but it can be overridden: \n   \n```js\nimport React, { Component } from 'react';\nimport { toast, cssTransition } from 'react-toastify';\nimport './style.css';\n\nconst Zoom = cssTransition({\n  enter: 'zoomIn',\n  exit: 'zoomOut',\n  // default to 750ms, can be omitted\n  duration = 750,\n});\n\nclass App extends Component {\n  notify = () => {\n    toast(\"ZoomIn and ZoomOut\", {\n      transition: Zoom,\n      autoClose: 5000\n    });\n  };\n\n  render(){\n    return <button onClick={this.notify}>Notify</button>;\n  }\n}\n```\n\n##### Different duration for enter and exit\n\nIf you want the transition duration to be different between the enter and exit transition pass an array:\n\n```js\nimport React, { Component } from 'react';\nimport { toast, cssTransition } from 'react-toastify';\nimport './style.css';\n\nconst Zoom = cssTransition({\n  enter: 'zoomIn',\n  exit: 'zoomOut',\n  duration: [500, 800]\n});\n\nclass App extends Component {\n  notify = () => {\n    toast(\"ZoomIn and ZoomOut\", {\n      transition: Zoom,\n      autoClose: 5000\n    });\n  };\n\n  render(){\n    return <button onClick={this.notify}>Notify</button>;\n  }\n}\n```\n\n##### Handle transition based on the toast position\n\nSome transitions are based on the toast position. This is the case for the default one. If you pass `appendPosition` to the `cssTransition` helper as shown below, the current position will be appended to the `enter` and `exit` class name:\n\n```js\nimport React, { Component } from 'react';\nimport { toast, cssTransition } from 'react-toastify';\nimport './style.css';\n\nconst Zoom = cssTransition({\n  // zoomIn will become zoomIn--top-right or zoomIn--top-left and so on\n  enter: 'zoomIn',\n  // zoomIn will become zoomOut--top-right or zoomOut--top-left and so on\n  exit: 'zoomOut',\n  // default to false\n  appendPosition: true\n});\n\nclass App extends Component {\n  notify = () => {\n    toast(\"ZoomIn and ZoomOut\", {\n      transition: Zoom,\n      autoClose: 5000\n    });\n  };\n\n  render(){\n    return <button onClick={this.notify}>Notify</button>;\n  }\n}\n```\n\n#### Create a transition from scratch \n\n```js\nimport React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport Transition from 'react-transition-group/Transition';\nimport './style.css';\n\nconst ZoomInAndOut = ({ children, position, ...props }) => (\n  <Transition\n    {...props}\n    {/* Same as the animation duration */}\n    timeout={800}\n    onEnter={ node => node.classList.add('zoomIn', 'animate')}\n    onExit={node => {\n      node.classList.remove('zoomIn', 'animate');\n      node.classList.add('zoomOut', 'animate');\n    }}\n  >\n    {children}\n  </Transition>\n);\n\nclass App extends Component {\n  notify = () => {\n    toast(\"ZoomIn and ZoomOut\", {\n      transition: ZoomInAndOut,\n      autoClose: 5000\n    });\n  };\n\n  render(){\n    return <button onClick={this.notify}>Notify</button>;\n  }\n}\n\n```\n\n### Swipe to remove\n\nYou can swipe the toast to remove it:\n\n![drag](https://user-images.githubusercontent.com/5574267/38770523-9438ff7c-4014-11e8-93a5-acd7dbdae52b.gif)\n\n#### Define the width percentage to remove the toast\n\nYou need to drag 80% of the toast width to remove it. This can be changed to fit your need:\n\n- Replace the default one:\n\n```js\n<ToastContainer draggablePercent={60}>\n``` \n\n- Replace per toast:\n\n```js\ntoast('Hello', {\n  draggablePercent: 60\n});\n``` \n\n#### Disable it\n\n- Disable by default for all toast:\n\n```js\n<ToastContainer draggable={false}>\n``` \n\n- Disable per toast:\n\n```js\ntoast('Hello', {\n  draggable: false\n});\n``` \n\n\n### Le style\n\n#### style with css classes\n\n```javascript\ntoast(\"Custom style\",{\n  className: 'black-background',\n  bodyClassName: \"grow-font-size\",\n  progressClassName: 'fancy-progress-bar' \n});\n```\n\n#### style with glamor\n\n```javascript\nimport { css } from 'glamor';\n\ntoast(\"Custom style\",{\n  className: css({\n    background: 'black'\n  }),\n  bodyClassName: css({\n    fontSize: '60px'\n  }),\n  progressClassName: css({\n    background: \"repeating-radial-gradient(circle at center, red 0, blue, green 30px)\"\n  })\n});\n```\n\n#### Define style globally\n\n```js\n<ToastContainer\n  className='toast-container'\n  toastClassName=\"dark-toast\"\n  progressClassName={css({\n    height: \"2px\"\n  })}\n/>\n```\n\n#### Right to left support\n\nYour app need to support rtl content? Set the rtl props to `true`:\n\n```javascript\n  render(){\n    return(\n      {/*Component*/}\n      <ToastContainer rtl />\n      {/*Component*/}\n    );\n  }\n```\n\n### Mobile\n\nOn mobile the toast will take all the available width.\n\n![react toastiy mobile](https://user-images.githubusercontent.com/5574267/28754040-ae7195ea-753d-11e7-86e1-f23c5e6bc531.gif)\n\n## Api\n\n### ToastContainer\n\n| Props                   | Type                   | Default   | Description                                                                                         |\n|-------------------------|------------------------|-----------|-----------------------------------------------------------------------------------------------------|\n| position                | string                 | top-right | One of top-right, top-center, top-left, bottom-right, bottom-center, bottom-left                    |\n| autoClose               | false or number        | 5000      | Delay in ms to close the toast. If set to false, the notification need to be closed manualy         |\n| closeButton             | React Element or false | -         | A React Component to replace the default close button or `false` to hide the button                 |\n| transition              | function               | -         | A reference to a valid react-transition-group/Transition component                                  |\n| hideProgressBar         | bool                   | false     | Display or not the progress bar below the toast(remaining time)                                     |\n| pauseOnHover            | bool                   | true      | Keep the timer running or not on hover                                                              |\n| rtl                     | bool                   | false     | Support right to left content                                                                       |\n| closeOnClick            | bool                   | true      | Dismiss toast on click                                                                              |\n| newestOnTop             | bool                   | false     | Display newest toast on top                                                                         |\n| className               | string\\|object         | -         | Add optional classes to the container                                                               |\n| style                   | object                 | -         | Add optional inline style to the container                                                          |\n| toastClassName          | string\\|object         | -         | Add optional classes to the toast                                                                   |\n| bodyClassName           | string\\|object         | -         | Add optional classes to the toast body                                                              |\n| progressClassName       | string\\|object         | -         | Add optional classes to the progress bar                                                            |\n| draggable               | bool                   | true      | Allow toast to be draggable                                                                         |\n| draggablePercent        | number                 | 80        | The percentage of the toast's width it takes for a drag to dismiss a toast(value between 0 and 100) |\n\n\n### toast\n\nAll the method of toast return a **toastId** except `dismiss` and `isActive`.\nThe **toastId** can be used to remove a toast programmatically or to check if the toast is displayed.\n\n\n| Parameter | Type    | Required      | Description                                                   |\n| --------- | ------- | ------------- | ------------------------------------------------------------- |\n| content   | string or React Element | ✓                                                             | Element that will be displayed |\n| options   | object  | ✘             | Options listed below |  |\n\n- Available options :\n    - `type`: Kind of notification. One of \"default\", \"success\", \"info\", \"warning\", \"error\". You can use `toast.TYPE.SUCCESS` and so on to avoid any typo.\n    - `onOpen`: Called inside componentDidMount\n    - `onClose`: Called inside componentWillUnmount\n    - `autoClose`: same as ToastContainer.\n    - `closeButton`: same as ToastContainer.\n    - `transition`: same as ToastContainer.\n    - `closeOnClick`: same as ToastContainer.\n    - `hideProgressBar`: same as ToastContainer.\n    - `position`: same as ToastContainer\n    - `pauseOnHover`: same as ToastContainer\n    - `className`: same as ToastContainer toastClassName\n    - `bodyClassName`: same as ToastContainer\n    - `progressClassName`: same as ToastContainer\n    - `draggable`: same as ToastContainer\n    - `draggablePercent`: same as ToastContainer\n    - `render`: string or React Element, only available when calling update\n\n:warning:️ *Toast options supersede ToastContainer props* :warning:\n\n```javascript\nconst Img = ({ src }) => <div><img width={48} src={src} /></div>;\nconst options = {\n    onOpen: props => console.log(props.foo),\n    onClose: props => console.log(props.foo),\n    autoClose: 6000,\n    closeButton: <FontAwesomeCloseButton />,\n    type: toast.TYPE.INFO,\n    hideProgressBar: false,\n    position: toast.POSITION.TOP_LEFT,\n    pauseOnHover: true,\n    transition: MyCustomTransition,\n    // and so on ...\n};\n\nconst toastId = toast(<Img foo={bar}/>, options) // default, type: 'default'\ntoast(({ closeToast }) => <div>Render props like</div>, options);\ntoast.success(\"Hello\", options) // add type: 'success' to options\ntoast.info(\"World\", options) // add type: 'info' to options\ntoast.warn(<Img />, options) // add type: 'warning' to options\ntoast.error(<Img />, options) // add type: 'error' to options\ntoast.dismiss() // Remove all toasts !\ntoast.dismiss(toastId) // Remove given toast\ntoast.isActive(toastId) //Check if a toast is displayed or not\ntoast.update(toastId, {\n  type: toast.TYPE.INFO,\n  render: <Img foo={bar}/>\n});\n```\n\n### cssTransition\n\n| Parameter      | Type   | Required | Default | Description                                                                                                |\n|----------------|--------|----------|---------|------------------------------------------------------------------------------------------------------------|\n| enter          | string | ✓        | -       | The class name that will be used when the toast enter                                                      |\n| exit           | string | ✓        | -       | The class name that will be used when the toast exit                                                       |\n| duration       | number\\| Array<number> | ✘        | 750     | The transition duration in ms.                                                                             |\n| appendPosition | bool   | ✘        | false   | Append or not the position  to the class name: `yourClassName--top-right`, `yourClassName--bottom-left`... |\n\n```js\nimport { cssTransition } from 'react-toastify';\n\nconst Zoom = cssTransition({\n  enter: 'zoomIn',\n  exit: 'zoomOut',\n  duration: 750,  \n  appendPosition: false\n});\n\nconst Zoom = cssTransition({\n  enter: 'zoomIn',\n  exit: 'zoomOut',\n  duration: [500, 600],  \n  appendPosition: false\n});\n```\n\n## Browser Support\n\n![IE](https://cloud.githubusercontent.com/assets/398893/3528325/20373e76-078e-11e4-8e3a-1cb86cf506f0.png) | ![Chrome](https://cloud.githubusercontent.com/assets/398893/3528328/23bc7bc4-078e-11e4-8752-ba2809bf5cce.png) | ![Firefox](https://cloud.githubusercontent.com/assets/398893/3528329/26283ab0-078e-11e4-84d4-db2cf1009953.png) | ![Opera](https://cloud.githubusercontent.com/assets/398893/3528330/27ec9fa8-078e-11e4-95cb-709fd11dac16.png) | ![Safari](https://cloud.githubusercontent.com/assets/398893/3528331/29df8618-078e-11e4-8e3e-ed8ac738693f.png) | ![Edge](https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png)\n--- | --- | --- | --- | --- | --- |\nIE 11+ ✔ | Latest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | Latest ✔ |\n\n## Release Notes\n\n### V4.1.0\n\n- Draggable prop can be updated, more details [here](https://github.com/fkhadra/react-toastify/issues/192)\n- Fix issue when passing glamor className. [More details](https://github.com/fkhadra/react-toastify/issues/191)\n- `pauseOnVisibility` has been disabled until I found a fix. The api is too much unstable 💩.\n\n### V4.0.0\n\n- Switch back to css\n- Added built-in transition\n- Added playground for contributor\n- Upgrade to webpack 4\n- Draggable 👌\n\n### V3.4.3\n\n- Fix position on mobile\n\n### V3.4.2\n\n- Fix exit animation bug\n\n### V3.4.1\n\n- Fix rtl on mobile\n\n### V3.4.0\n\n- Add `rtl` props to support right to left content.\n\n### V3.3.5\n\n- Add `fontFamily` to typescript definition\n\n### V3.3.4\n\n- `toast.update` run now at the end of the call stack. For more details, check [issue #135](https://github.com/fkhadra/react-toastify/issues/135)\n\n### V3.3.3\n\n- Clean animation on entered. This was preventing any update transition to works.\n\n### V3.3.1\n\n- Fix height [issue #124](https://github.com/fkhadra/react-toastify/issues/124)\n- Update typescript definition\n\n### V3.3.0\n\n- Better accessibility, relate to [issue #121](https://github.com/fkhadra/react-toastify/issues/121)\n- Reviewed exit animation. No more clipping.\n\n### V3.2.2\n\n- Add comment to typescript definition.\n\n### V3.2.1\n\n- Fix typescript definition. Relate to [issue #110](https://github.com/fkhadra/react-toastify/issues/110)\n\n### V3.2.0\n\n- Allow \"render props\" rendering. Relate to [issue #106](https://github.com/fkhadra/react-toastify/issues/106)\n- Can set fontFamily via the style helper. Relate to [issue #107](https://github.com/fkhadra/react-toastify/issues/107)\n- Can override position default values via style helper. Realte to [issue #108](https://github.com/fkhadra/react-toastify/issues/108)\n\n### V3.1.2\n- Fix [issue #103](https://github.com/fkhadra/react-toastify/issues/103) for real...\n- Fix [issue #104](https://github.com/fkhadra/react-toastify/issues/104) Incorrect TS definition for `toast.dismiss`\n\n### V3.1.1\n\n- Fix [issue #103](https://github.com/fkhadra/react-toastify/issues/103)\n\n### V3.1.0\n\n- Add ability to update an existing toast \n- Allow to define the zIndex via the style helper\n- Get rid of all inline style\n\n### V3.0.0\n\n- Switched to styled component with glamor\n- Added style helper to replace sass variables\n- Test suite improved\n- Typescript definition improved\n\n### V2.2.1\n\n- Fix [issue #71](https://github.com/fkhadra/react-toastify/issues/71)\n\n### V2.2.0\n\n- Sass variables are now namespaced\n\n### V2.1.7\n\n- Can now use [sass variable default](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#Variable_Defaults___default) thanks to [vikpe](https://github.com/vikpe)\n### V2.1.5\n\n- Test suites improved\n\n### V2.1.4\n\n- Fix broken typescript dependencies\n\n### V2.1.3\n\n- Added typescript definition\n- Toast will pause when page is not visible thanks to page visibility api.\n\n### V2.1.2\n\n- Previous version was breaking compatibility with react < 16\n### V2.1.1\n\n#### Bugfix\n\n- Remove toast from react dom when not displayed. Because of that the `onClose` callback on the toast was never called. Relate to [issue #50](https://github.com/fkhadra/react-toastify/issues/50)\n\n### V2.1.0\n\n#### New Features\n\n- Can set a custom transition when the toat enter and exit the screen :sparkles:\n\n#### Others\n\n- Upgrade to react v16\n- Upgrade to enzyme v3\n- Switched to react-app preset for eslint\n- Upgrade to webpack v3\n- Upgrade to react-transition-group v2\n\n\n### V2.0.0\n\nThis version may introduce breaking changes due to redesign. My apologies.\n\nBut, it brings a lots of new and exciting features !\n\n#### New Features\n\n- The default design has been reviewed. The component is now usable out of the box without the need to touch the css. Relate to [issue #28](https://github.com/fkhadra/react-toastify/issues/28)\n- The toast timer can keep running on hover. [issue #33](https://github.com/fkhadra/react-toastify/issues/33)\n- Added a possibility to check if a given toast is displayed or not. By using that method we can prevent duplicate. [issue #3](https://github.com/fkhadra/react-toastify/issues/3)\n- Can decide to close the toast on click\n- Can show newest toast on top\n- Can define additionnal className for toast[issue #21](https://github.com/fkhadra/react-toastify/issues/21)\n- Much more mobile ready than the past\n\n#### Bug Fixes\n\n- The space in of left boxes from window & right boxes from window is different.[issue #25](https://github.com/fkhadra/react-toastify/issues/25)\n- Partial support of ie11. I still need to fix the animation but I need a computer with ie11 for that xD [issue #26](https://github.com/fkhadra/react-toastify/issues/26)\n\n### v1.7.0\n\n#### New Features\n\n- Toast can now be positioned individually !\n\n### v1.6.0\n\n#### New Features\n\n- Can now remove a toast programmatically. When you display a toast, the function return a **toastId**. You can use it\nas follow to remove a given toast `toast.dismiss(toastId)`\n- If the container is not mounted, the notification will be added to a queue and dispatched as soon as the container is mounted.\nFor more details check [issue #4](https://github.com/fkhadra/react-toastify/issues/4)\n\n#### Others\n\n- Added --no-idents flag to cssnano to avoid animation name collision with others libs.\n- Tests are no longer transpiled\n\n### v1.5.0\n\n- That version does not bring any features but it brings tests made with the amazing jest and aslo Travis CI integration.\n\n### v1.4.3\n\n- React and react-dom are now peer dependencies\n\n### v1.4.2\n\n- Don't try to pass down the props when we render a string like so : `toast(<div>hello</div>)`\n\n#### Bug fix\n\n- Fixed the test to check if the toast can be rendered\n\n### v1.4.0\n\n- React v16 ready : moving to prop-types and react-transition-group\n- Internal rewrite of components. The implementation wasn't bad but it wasn't good either. A better props validation has been added has well.\n- Removed useless dependencies. I was using the Object.values polyfill when a one line forEach can do the same is my case.\n- Now I believe it's even easier to style the components. The sass sources files are now included when you install the package via yarn or npm\n- The default close button has been replaced.\n\n#### New Features\n\n- A progress bar is now visible to track the remaining time before the notification is closed. Of course if you don't like it, you are free to disable it.\n- You can choose to display a close button or not.\n- Event pointer is set to none to avoid losing pointer events on everything beneath the toast container when no toast are displayed\n- The `closeToast` callback is also passed down to your component.\n\n### v1.3.0\n\n- PropTypes package update\n- Dead code elimination\n\n#### New Features\n\n- Possibility to use a custom close button. Check the api docs of ToastContainer and toast.\n\n### v1.2.2\n\nI was storing react component into state which is a bad practice. [What should Go in State](http://web.archive.org/web/20150419023006/http://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html)\nThis is no more the case now. The separation of concern between the data and the view is respected.\n\n#### Bug fix\n\n- Was calling cloneElement on undefined which cause your console bleed. See issue [#2](https://github.com/fkhadra/react-toastify/issues/2)\n\n\n### v1.2.1\n\n#### Bug fix\n\n- Added Object.values polyfill otherwise won't work with IE or EDGE. I ♥ IE.\n\n### v1.1.1\n\n#### Bug fix\n\n- OnClose and OnOpen can access all the props passed to the component. Before\nonly the props passed using toast options were accessible\n\n#### New Features\n\n- Passing prop using toast option will be removed at the next release. It doesn't\nmake sense to keep both way to pass props. Use the react way instead\n\n### v1.1.0\n\n#### New Features\n\n- Added onOpen callback\n- Added onClose callback\n\n## Contribute\n\nShow your ❤️ and support by giving a ⭐. Any suggestions and pull request are welcome !\n\nTry the playground:\n\n```js\nnpm start\n```\n\n## License\n\nLicensed under MIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fkhadra/react-toastify.git"
  },
  "scripts": {
    "build": "npm run build:es && npm run build:umd && npm run style",
    "build:es": "npm run clean:es && cross-env NODE_ENV=production babel --ignore=__tests__ src -d lib",
    "build:umd": "npm run clean:umd && cross-env NODE_ENV=production webpack",
    "clean:es": "rimraf lib/*",
    "clean:umd": "rimraf dist/*",
    "lint": "eslint src/",
    "lint:fix": "eslint --fix src/",
    "postsass": "postcss --use autoprefixer -m -b 'last 2 versions' dist/ReactToastify.css -o dist/ReactToastify.css",
    "prebuild": "npm run test",
    "prettier-all": "prettier --single-quote --write 'src/**/*.js'",
    "sass": "node-sass scss/main.scss dist/ReactToastify.css",
    "start": "npm run sass && webpack-dev-server --config ./webpack.config.dev.js",
    "style": "npm run sass && cssnano dist/ReactToastify.css dist/ReactToastify.min.css --no-zindex --no-reduceIdents",
    "test": "jest",
    "test:coverage": "jest --coverage && cat ./coverage/lcov.info | coveralls"
  },
  "typings": "./index.d.ts",
  "version": "4.1.0"
}
