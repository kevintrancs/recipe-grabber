{
  "_args": [
    [
      {
        "raw": "babel-preset-env",
        "scope": null,
        "escapedName": "babel-preset-env",
        "name": "babel-preset-env",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/ktran/Documents/Recipe/client"
    ]
  ],
  "_from": "babel-preset-env@latest",
  "_id": "babel-preset-env@1.7.0",
  "_inCache": true,
  "_location": "/babel-preset-env",
  "_nodeVersion": "8.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/babel-preset-env_1.7.0_1525962681842_0.8440913612414951"
  },
  "_npmUser": {
    "name": "existentialism",
    "email": "bng412@gmail.com"
  },
  "_npmVersion": "6.0.0",
  "_phantomChildren": {
    "caniuse-lite": "1.0.30000874",
    "electron-to-chromium": "1.3.57"
  },
  "_requested": {
    "raw": "babel-preset-env",
    "scope": null,
    "escapedName": "babel-preset-env",
    "name": "babel-preset-env",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/babel-preset-env/-/babel-preset-env-1.7.0.tgz",
  "_shasum": "dea79fa4ebeb883cd35dab07e260c1c9c04df77a",
  "_shrinkwrap": null,
  "_spec": "babel-preset-env",
  "_where": "/Users/ktran/Documents/Recipe/client",
  "author": {
    "name": "Henry Zhu",
    "email": "hi@henryzoo.com"
  },
  "babel": {
    "presets": [
      [
        "env",
        {
          "loose": true
        }
      ]
    ],
    "env": {
      "test": {
        "plugins": [
          "istanbul"
        ]
      }
    }
  },
  "bugs": {
    "url": "https://github.com/babel/babel-preset-env/issues"
  },
  "dependencies": {
    "babel-plugin-check-es2015-constants": "^6.22.0",
    "babel-plugin-syntax-trailing-function-commas": "^6.22.0",
    "babel-plugin-transform-async-to-generator": "^6.22.0",
    "babel-plugin-transform-es2015-arrow-functions": "^6.22.0",
    "babel-plugin-transform-es2015-block-scoped-functions": "^6.22.0",
    "babel-plugin-transform-es2015-block-scoping": "^6.23.0",
    "babel-plugin-transform-es2015-classes": "^6.23.0",
    "babel-plugin-transform-es2015-computed-properties": "^6.22.0",
    "babel-plugin-transform-es2015-destructuring": "^6.23.0",
    "babel-plugin-transform-es2015-duplicate-keys": "^6.22.0",
    "babel-plugin-transform-es2015-for-of": "^6.23.0",
    "babel-plugin-transform-es2015-function-name": "^6.22.0",
    "babel-plugin-transform-es2015-literals": "^6.22.0",
    "babel-plugin-transform-es2015-modules-amd": "^6.22.0",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.23.0",
    "babel-plugin-transform-es2015-modules-systemjs": "^6.23.0",
    "babel-plugin-transform-es2015-modules-umd": "^6.23.0",
    "babel-plugin-transform-es2015-object-super": "^6.22.0",
    "babel-plugin-transform-es2015-parameters": "^6.23.0",
    "babel-plugin-transform-es2015-shorthand-properties": "^6.22.0",
    "babel-plugin-transform-es2015-spread": "^6.22.0",
    "babel-plugin-transform-es2015-sticky-regex": "^6.22.0",
    "babel-plugin-transform-es2015-template-literals": "^6.22.0",
    "babel-plugin-transform-es2015-typeof-symbol": "^6.23.0",
    "babel-plugin-transform-es2015-unicode-regex": "^6.22.0",
    "babel-plugin-transform-exponentiation-operator": "^6.22.0",
    "babel-plugin-transform-regenerator": "^6.22.0",
    "browserslist": "^3.2.6",
    "invariant": "^2.2.2",
    "semver": "^5.3.0"
  },
  "description": "A Babel preset for each environment.",
  "devDependencies": {
    "babel-cli": "^6.23.0",
    "babel-eslint": "^7.1.1",
    "babel-helper-fixtures": "^6.22.0",
    "babel-helper-plugin-test-runner": "^6.22.0",
    "babel-plugin-istanbul": "^3.1.2",
    "babel-preset-env": "^1.4.0",
    "babel-register": "^6.23.0",
    "chai": "^3.5.0",
    "codecov": "^1.0.1",
    "compat-table": "github:kangax/compat-table#957f1ff15972e8fb2892a172f985e9af27bf1c75",
    "electron-to-chromium": "^1.3.11",
    "eslint": "^3.17.1",
    "eslint-config-babel": "^6.0.0",
    "eslint-plugin-flowtype": "^2.29.1",
    "fs-extra": "~2.0.0",
    "lodash": "^4.17.4",
    "mocha": "^3.2.0",
    "nyc": "^10.1.2",
    "rimraf": "^2.6.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-9OR2afuKDneX2/q2EurSftUYM0xGu4O2D9adAhVfADDhrYDaxXV0rBbevVYoY9n6nyX1PmQW/0jtpJvUNr9CHg==",
    "shasum": "dea79fa4ebeb883cd35dab07e260c1c9c04df77a",
    "tarball": "https://registry.npmjs.org/babel-preset-env/-/babel-preset-env-1.7.0.tgz",
    "fileCount": 17,
    "unpackedSize": 100682,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa9Fe7CRA9TVsSAnZWagAAAzcP/252Y4iXoKs5ns3XZg1N\nQ4GpSa6514gaUxMGsUo/g0L72jxIqQyHqotI9+acHKKM8ZK+hd4MCpkVv9kh\nBleUSlDyGIRZ8BAYaIBor+JEt3C9aWaaUOnt69m8YJ2AiOvHpww6TH1p0lNU\nVnupBfalJiyc3eMjuP4TvLE6V7r2qN+jGa97bSoAS1XXthL6anjgELIlxbq1\n+EWUrkwIH7s64acqWRee45Oy85I1PWhTB2bwErVEoWnJO4MUGESJbrvxhAnA\niqjq1OJHF7udBfPILVMGVsCiunU8T9rs1lIjL7q/NHaG8/8upsbN391I/Bgn\nl+hy8s1n6n4DxvrugbunuPy5EdMiMalFjoYh6JikMBnGqBcqK9lM+xHSJub1\nt5K8Fh5oCgOj9+whxvUnVH51+F4eX4a5d9Z9D5EZi/VrJMlAEqyljCVEDAbH\nS2yhbhiBjymjhzPGYoPx2kQx9K9lS1mxYKA1NHDJxavD5lTfQzBu+fWVtqB0\nGsZoR7lpGakQD3MnfjByYNQSgvd/oa2RxNndz2V43qVD2Hh/q1sg1vTKB831\n2wo7ZgeW3g14fv8vMh85AwE0aw4kG7Xdl+Y66SbXdAO/UzoDK6pAPwfbLhZZ\nu0BKuDImRDpwuJHAFvovVPKfxMIdmmQV4KELn8Z5i2PzI2YQyMIhdya2EByl\nHCts\r\n=/JIC\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "31f33e3656e1bd8036317c54128fdc2812a2e8aa",
  "homepage": "https://babeljs.io/",
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "danez",
      "email": "daniel@tschinder.de"
    },
    {
      "name": "existentialism",
      "email": "bng412@gmail.com"
    },
    {
      "name": "hzoo",
      "email": "hi@henryzoo.com"
    },
    {
      "name": "loganfsmyth",
      "email": "loganfsmyth@gmail.com"
    },
    {
      "name": "sebmck",
      "email": "sebmck@gmail.com"
    },
    {
      "name": "thejameskyle",
      "email": "me@thejameskyle.com"
    }
  ],
  "name": "babel-preset-env",
  "nyc": {
    "all": true,
    "include": [
      "src/*.js"
    ],
    "instrument": false,
    "sourceMap": false
  },
  "optionalDependencies": {},
  "readme": "# Now that `babel-preset-env` has stabilized, it has been [moved into the main Babel mono-repo](https://github.com/babel/babel/tree/master/packages/babel-preset-env) and this repo has been archived.\n\nThe move makes it much easier to release and develop in sync with the rest of Babel!\n\nThis repo will be made read-only, as all of the issues/labels have been moved over as well. Please report any bugs and open pull requests over on the [main mono-repo](https://github.com/babel/babel).\n\n---\n\n# babel-preset-env [![npm](https://img.shields.io/npm/v/babel-preset-env.svg)](https://www.npmjs.com/package/babel-preset-env) [![travis](https://img.shields.io/travis/babel/babel-preset-env/master.svg)](https://travis-ci.org/babel/babel-preset-env) [![npm-downloads](https://img.shields.io/npm/dm/babel-preset-env.svg)](https://www.npmjs.com/package/babel-preset-env) [![codecov](https://img.shields.io/codecov/c/github/babel/babel-preset-env/master.svg?maxAge=43200)](https://codecov.io/github/babel/babel-preset-env)\n\n> A Babel preset that compiles [ES2015+](https://github.com/tc39/proposals/blob/master/finished-proposals.md) down to ES5 by automatically determining the Babel plugins and polyfills you need based on your targeted browser or runtime environments.\n\n```sh\nnpm install babel-preset-env --save-dev\n```\n\nWithout any configuration options, babel-preset-env behaves exactly the same as babel-preset-latest (or babel-preset-es2015, babel-preset-es2016, and babel-preset-es2017 together).\n\n> However, we don't recommend using `preset-env` this way because it doesn't take advantage of it's greater capabilities of targeting specific browsers.\n\n```json\n{\n  \"presets\": [\"env\"]\n}\n```\n\nYou can also configure it to only include the polyfills and transforms needed for the browsers you support. Compiling only what's needed can make your bundles smaller and your life easier.\n\nThis example only includes the polyfills and code transforms needed for coverage of users > 0.25%, ignoring Internet Explorer 11 and Opera Mini.. We use [browserslist](https://github.com/ai/browserslist) to parse this information, so you can use [any valid query format supported by browserslist](https://github.com/ai/browserslist#queries).\n\n```js\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        // The % refers to the global coverage of users from browserslist\n        \"browsers\": [ \">0.25%\", \"not ie 11\", \"not op_mini all\"]\n      }\n    }]\n  ]\n}\n```\n\n> You can also target individual versions of browsers instead of using a query with `\"targets\": { \"chrome\": \"52\" }`.\n\nSimilarly, if you're targeting Node.js instead of the browser, you can configure babel-preset-env to only include the polyfills and transforms necessary for a particular version:\n\n```json\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"node\": \"6.10\"\n      }\n    }]\n  ]\n}\n```\n\nFor convenience, you can use `\"node\": \"current\"` to only include the necessary polyfills and transforms for the Node.js version that you use to run Babel:\n\n```json\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"node\": \"current\"\n      }\n    }]\n  ]\n}\n```\n\nCheck out the many options (especially `useBuiltIns` to polyfill less)!\n\n- [How it Works](#how-it-works)\n- [Install](#install)\n- [Usage](#usage)\n- [Options](#options)\n- [Examples](#examples)\n- [Caveats](#caveats)\n- [Other Cool Projects](#other-cool-projects)\n\n## How it Works\n\n### Determine environment support for ECMAScript features\n\nUse external data such as [`compat-table`](https://github.com/kangax/compat-table) to determine browser support. (We should create PRs there when necessary)\n\n![](https://cloud.githubusercontent.com/assets/588473/19214029/58deebce-8d48-11e6-9004-ee3fbcb75d8b.png)\n\nWe can periodically run [build-data.js](https://github.com/babel/babel-preset-env/blob/master/scripts/build-data.js) which generates [plugins.json](https://github.com/babel/babel-preset-env/blob/master/data/plugins.json).\n\nRef: [#7](https://github.com/babel/babel-preset-env/issues/7)\n\n### Maintain a mapping between JavaScript features and Babel plugins\n\n> Currently located at [plugin-features.js](https://github.com/babel/babel-preset-env/blob/master/data/plugin-features.js).\n\nThis should be straightforward to do in most cases. There might be cases where plugins should be split up more or certain plugins aren't standalone enough (or impossible to do).\n\n### Support all plugins in Babel that are considered `latest`\n\n> Default behavior without options is the same as `babel-preset-latest`.\n\nIt won't include `stage-x` plugins. env will support all plugins in what we consider the latest version of JavaScript (by matching what we do in [`babel-preset-latest`](http://babeljs.io/docs/plugins/preset-latest/)).\n\nRef: [#14](https://github.com/babel/babel-preset-env/issues/14)\n\n### Determine the lowest common denominator of plugins to be included in the preset\n\nIf you are targeting IE 8 and Chrome 55 it will include all plugins required by IE 8 since you would need to support both still.\n\n### Support a target option `\"node\": \"current\"` to compile for the currently running node version.\n\nFor example, if you are building on Node 6, arrow functions won't be converted, but they will if you build on Node 0.12.\n\n### Support a `browsers` option like autoprefixer\n\nUse [browserslist](https://github.com/ai/browserslist) to declare supported environments by performing queries like `> 1%, last 2 versions`.\n\nRef: [#19](https://github.com/babel/babel-preset-env/pull/19)\n\n## Install\n\nWith [npm](https://www.npmjs.com):\n\n```sh\nnpm install --save-dev babel-preset-env\n```\n\nOr [yarn](https://yarnpkg.com):\n\n```sh\nyarn add babel-preset-env --dev\n```\n\n## Usage\n\nThe default behavior without options runs all transforms (behaves the same as [babel-preset-latest](https://babeljs.io/docs/plugins/preset-latest/)).\n\n```json\n{\n  \"presets\": [\"env\"]\n}\n```\n\n## Options\n\nFor more information on setting options for a preset, refer to the [plugin/preset options](http://babeljs.io/docs/plugins/#plugin-preset-options) documentation.\n\n### `targets`\n\n`{ [string]: number | string }`, defaults to `{}`.\n\nTakes an object of environment versions to support.\n\nEach target environment takes a number or a string (we recommend using a string when specifying minor versions like `node: \"6.10\"`).\n\nExample environments: `chrome`, `opera`, `edge`, `firefox`, `safari`, `ie`, `ios`, `android`, `node`, `electron`.\n\nThe [data](https://github.com/babel/babel-preset-env/blob/master/data/plugins.json) for this is generated by running the [build-data script](https://github.com/babel/babel-preset-env/blob/master/scripts/build-data.js) which pulls in data from [compat-table](https://kangax.github.io/compat-table).\n\n### `targets.node`\n\n`number | string | \"current\" | true`\n\nIf you want to compile against the current node version, you can specify `\"node\": true` or `\"node\": \"current\"`, which would be the same as `\"node\": process.versions.node`.\n\n### `targets.browsers`\n\n`Array<string> | string`\n\nA query to select browsers (ex: last 2 versions, > 5%) using [browserslist](https://github.com/ai/browserslist).\n\nNote, browsers' results are overridden by explicit items from `targets`.\n\n### `targets.uglify`\n\n`true`\n\nWhen using `uglify-js` to minify your code, you may run into syntax errors when targeting later browsers since `uglify-js` does not support any ES2015+ syntax.\n\nTo prevent these errors - set the `uglify` option to `true`, which enables all transformation plugins and as a result, your code is fully compiled to ES5. However, the `useBuiltIns` option will still work as before and only include the polyfills that your target(s) need.\n\n> Uglify has support for ES2015 syntax via [uglify-es](https://github.com/mishoo/UglifyJS2/tree/harmony). If you are using syntax unsupported by `uglify-es`, we recommend using [babel-minify](https://github.com/babel/minify).\n\n> Note: This option is deprecated in 2.x and replaced with a [`forceAllTransforms` option](https://github.com/babel/babel-preset-env/pull/264).\n\n### `spec`\n\n`boolean`, defaults to `false`.\n\nEnable more spec compliant, but potentially slower, transformations for any plugins in this preset that support them.\n\n### `loose`\n\n`boolean`, defaults to `false`.\n\nEnable \"loose\" transformations for any plugins in this preset that allow them.\n\n### `modules`\n\n`\"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | false`, defaults to `\"commonjs\"`.\n\nEnable transformation of ES6 module syntax to another module type.\n\nSetting this to `false` will not transform modules.\n\n### `debug`\n\n`boolean`, defaults to `false`.\n\nOutputs the targets/plugins used and the version specified in [plugin data version](https://github.com/babel/babel-preset-env/blob/master/data/plugins.json) to `console.log`.\n\n### `include`\n\n`Array<string>`, defaults to `[]`.\n\n> NOTE: `whitelist` is deprecated and will be removed in the next major in favor of this.\n\nAn array of plugins to always include.\n\nValid options include any:\n\n- [Babel plugins](https://github.com/babel/babel-preset-env/blob/master/data/plugin-features.js) - both with (`babel-plugin-transform-es2015-spread`) and without prefix (`transform-es2015-spread`) are supported.\n\n- [Built-ins](https://github.com/babel/babel-preset-env/blob/master/data/built-in-features.js), such as `map`, `set`, or `object.assign`.\n\nThis option is useful if there is a bug in a native implementation, or a combination of a non-supported feature + a supported one doesn't work.\n\nFor example, Node 4 supports native classes but not spread. If `super` is used with a spread argument, then the `transform-es2015-classes` transform needs to be `include`d, as it is not possible to transpile a spread with `super` otherwise.\n\n> NOTE: The `include` and `exclude` options _only_ work with the [plugins included with this preset](https://github.com/babel/babel-preset-env/blob/master/data/plugin-features.js); so, for example, including `transform-do-expressions` or excluding `transform-function-bind` will throw errors. To use a plugin _not_ included with this preset, add them to your [config](https://babeljs.io/docs/usage/babelrc/) directly.\n\n### `exclude`\n\n`Array<string>`, defaults to `[]`.\n\nAn array of plugins to always exclude/remove.\n\nThe possible options are the same as the `include` option.\n\nThis option is useful for \"blacklisting\" a transform like `transform-regenerator` if you don't use generators and don't want to include `regeneratorRuntime` (when using `useBuiltIns`) or for using another plugin like [fast-async](https://github.com/MatAtBread/fast-async) instead of [Babel's async-to-gen](http://babeljs.io/docs/plugins/transform-async-generator-functions/).\n\n### `useBuiltIns`\n\n`boolean`, defaults to `false`.\n\nA way to apply `babel-preset-env` for polyfills (via \"babel-polyfill\").\n\n> NOTE: This does not currently polyfill experimental/stage-x built-ins like the regular \"babel-polyfill\" does.\n> This will only work with npm >= 3 (which should be used with Babel 6 anyway)\n\n```\nnpm install babel-polyfill --save\n```\n\nThis option enables a new plugin that replaces the statement `import \"babel-polyfill\"` or `require(\"babel-polyfill\")` with individual requires for `babel-polyfill` based on environment.\n\n> NOTE: Only use `require(\"babel-polyfill\");` once in your whole app.\n> Multiple imports or requires of `babel-polyfill` will throw an error since it can cause global collisions and other issues that are hard to trace.\n> We recommend creating a single entry file that only contains the `require` statement.\n\n**In**\n\n```js\nimport \"babel-polyfill\";\n```\n\n**Out (different based on environment)**\n\n```js\nimport \"core-js/modules/es7.string.pad-start\";\nimport \"core-js/modules/es7.string.pad-end\";\nimport \"core-js/modules/web.timers\";\nimport \"core-js/modules/web.immediate\";\nimport \"core-js/modules/web.dom.iterable\";\n```\n\nThis will also work for `core-js` directly (`import \"core-js\";`)\n\n```\nnpm install core-js --save\n```\n\n---\n\n## Examples\n\n### Export with various targets\n\n```js\nexport class A {}\n```\n\n#### Target only Chrome 52\n\n**.babelrc**\n\n```json\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"chrome\": 52\n      }\n    }]\n  ]\n}\n```\n\n**Out**\n\n```js\nclass A {}\nexports.A = A;\n```\n\n#### Target Chrome 52 with webpack 2/rollup and loose mode\n\n**.babelrc**\n\n```json\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"chrome\": 52\n      },\n      \"modules\": false,\n      \"loose\": true\n    }]\n  ]\n}\n```\n\n**Out**\n\n```js\nexport class A {}\n```\n\n#### Target specific browsers via browserslist\n\n**.babelrc**\n\n```json\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"chrome\": 52,\n        \"browsers\": [\"last 2 versions\", \"safari 7\"]\n      }\n    }]\n  ]\n}\n```\n\n**Out**\n\n```js\nexport var A = function A() {\n  _classCallCheck(this, A);\n};\n```\n\n#### Target latest node via `node: true` or `node: \"current\"`\n\n**.babelrc**\n\n```json\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"node\": \"current\"\n      }\n    }]\n  ]\n}\n```\n\n**Out**\n\n```js\nclass A {}\nexports.A = A;\n```\n\n### Show debug output\n\n**.babelrc**\n\n```json\n{\n  \"presets\": [\n    [ \"env\", {\n      \"targets\": {\n        \"safari\": 10\n      },\n      \"modules\": false,\n      \"useBuiltIns\": true,\n      \"debug\": true\n    }]\n  ]\n}\n```\n\n**stdout**\n\n```sh\nUsing targets:\n{\n  \"safari\": 10\n}\n\nModules transform: false\n\nUsing plugins:\n  transform-exponentiation-operator {}\n  transform-async-to-generator {}\n\nUsing polyfills:\n  es7.object.values {}\n  es7.object.entries {}\n  es7.object.get-own-property-descriptors {}\n  web.timers {}\n  web.immediate {}\n  web.dom.iterable {}\n```\n\n### Include and exclude specific plugins/built-ins\n\n> always include arrow functions, explicitly exclude generators\n\n```json\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"browsers\": [\"last 2 versions\", \"safari >= 7\"]\n      },\n      \"include\": [\"transform-es2015-arrow-functions\", \"es6.map\"],\n      \"exclude\": [\"transform-regenerator\", \"es6.set\"]\n    }]\n  ]\n}\n```\n\n## Caveats\n\nIf you get a `SyntaxError: Unexpected token ...` error when using the [object-rest-spread](https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-object-rest-spread) transform then make sure the plugin has been updated to, at least, `v6.19.0`.\n\n## Other Cool Projects\n\n- [babel-preset-modern-browsers](https://github.com/christophehurpeau/babel-preset-modern-browsers)\n- ?\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/babel/babel-preset-env.git"
  },
  "scripts": {
    "build": "rimraf lib && babel src -d lib",
    "build-data": "node ./scripts/build-data.js",
    "changelog": "git log `git describe --tags --abbrev=0`..HEAD --pretty=format:' * %s (%an)' | grep -v 'Merge pull request'",
    "coverage": "BABEL_ENV=test nyc npm run test",
    "coverage-ci": "nyc report --reporter=json && codecov -f coverage/coverage-final.json",
    "dev": "babel -w src -d lib",
    "fix": "eslint . --fix",
    "lint": "eslint .",
    "prepublish": "npm run build",
    "test": "npm run build && npm run test-only",
    "test-ci": "nyc npm run test",
    "test-only": "mocha ./test --compilers js:babel-register -t 10000"
  },
  "version": "1.7.0"
}
