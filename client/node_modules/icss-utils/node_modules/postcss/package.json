{
  "_args": [
    [
      {
        "raw": "postcss@^6.0.1",
        "scope": null,
        "escapedName": "postcss",
        "name": "postcss",
        "rawSpec": "^6.0.1",
        "spec": ">=6.0.1 <7.0.0",
        "type": "range"
      },
      "/Users/ktran/Documents/Recipe/client/node_modules/icss-utils"
    ]
  ],
  "_from": "postcss@>=6.0.1 <7.0.0",
  "_id": "postcss@6.0.23",
  "_inCache": true,
  "_location": "/icss-utils/postcss",
  "_nodeVersion": "10.4.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/postcss_6.0.23_1529606606149_0.8604350349706491"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "postcss@^6.0.1",
    "scope": null,
    "escapedName": "postcss",
    "name": "postcss",
    "rawSpec": "^6.0.1",
    "spec": ">=6.0.1 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/icss-utils"
  ],
  "_resolved": "https://registry.npmjs.org/postcss/-/postcss-6.0.23.tgz",
  "_shasum": "61c82cc328ac60e677645f979054eb98bc0e3324",
  "_shrinkwrap": null,
  "_spec": "postcss@^6.0.1",
  "_where": "/Users/ktran/Documents/Recipe/client/node_modules/icss-utils",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "browser": {
    "supports-color": false,
    "chalk": false,
    "fs": false
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss/issues"
  },
  "dependencies": {
    "chalk": "^2.4.1",
    "source-map": "^0.6.1",
    "supports-color": "^5.4.0"
  },
  "description": "Tool for transforming styles with JS plugins",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-soOk1h6J3VMTZtVeVpv15/Hpdl2cBLX3CAw4TAbkpTJiNPk9YP/zWcD1ND+xEtvyuuvKzbxliTOIyvkSeSJ6ag==",
    "shasum": "61c82cc328ac60e677645f979054eb98bc0e3324",
    "tarball": "https://registry.npmjs.org/postcss/-/postcss-6.0.23.tgz",
    "fileCount": 38,
    "unpackedSize": 658430,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbK/HOCRA9TVsSAnZWagAAPzYQAJhAPB3anXHqUf6HSCAX\n7JKqzwOY3yOu9JNtHUOz81+a22qshkQEaBkwQ9z8Raq3lXhUaCEbdF0Uf1qf\n7L0Ekk0Xe3jsGMQPqeb0kuZjEwWhP2AJmw8klvhyhF+iIV1b85x0hvKyG47v\nspPZ1hxODPVxb/RSOZIam2d7orZrtrFvOI57pioudlod8G1DDwXE5nWvc3H3\nFYrWgQEVePhqfgNlDqHiC429Ducr6kgdNUdvJMM0CBRmPFWqgNHyoBnVqyD0\n5SoPmkgM+RGs1X1+b6AT5293/BslIdPtXkeWTdPMzRIb73s2PezjCNgt76/1\nycT27OGnjuhUKtLOJQdZIevdXNX6bMcuCqPrLpNyHo+Nc2X+0cJFslRNmuqR\n27tT1vPqndF9ASeXdx1tQZtPjwT70KvjE0TJN2d+SDp1R8jVm5hTVf4Rl+sg\nagwTRNexaaLfiIkV/mky+zHxm5mGP57jkzbbcr/JkuNUbBGJHaSbQgG2czf3\nABinbEkats9kssoIQpBkF+7d/Gp7YFBNEgfXjCMqlrx1LP9kuspxyS+BiCre\nAx4qx+qJPApDuddSfs5akfcFApf27iE4tV8mYcYXn2AVbIe8xlbWdDzYEu68\n7lE2hSxGYUOEqEfuQQMPMzm3PidC8+kj9u/T3VUKAqd8Vtf2ts4XFXeHRa+P\n4hMH\r\n=R4OJ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "homepage": "https://postcss.org/",
  "keywords": [
    "css",
    "postcss",
    "rework",
    "preprocessor",
    "parser",
    "source map",
    "transform",
    "manipulation",
    "transpiler"
  ],
  "license": "MIT",
  "main": "lib/postcss",
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    },
    {
      "name": "beneb",
      "email": "beneb.info@gmail.com"
    },
    {
      "name": "trysound",
      "email": "trysound@yandex.ru"
    }
  ],
  "name": "postcss",
  "optionalDependencies": {},
  "readme": "# PostCSS [![Gitter][chat-img]][chat]\n\n<img align=\"right\" width=\"95\" height=\"95\"\n     alt=\"Philosopher’s stone, logo of PostCSS\"\n     src=\"http://postcss.github.io/postcss/logo.svg\">\n\n[chat-img]: https://img.shields.io/badge/Gitter-Join_the_PostCSS_chat-brightgreen.svg\n[chat]:     https://gitter.im/postcss/postcss\n\nPostCSS is a tool for transforming styles with JS plugins.\nThese plugins can lint your CSS, support variables and mixins,\ntranspile future CSS syntax, inline images, and more.\n\nPostCSS is used by industry leaders including Wikipedia, Twitter, Alibaba,\nand JetBrains. The [Autoprefixer] PostCSS plugin is one of the most popular\nCSS processors.\n\nPostCSS takes a CSS file and provides an API to analyze and modify its rules\n(by transforming them into an [Abstract Syntax Tree]).\nThis API can then be used by [plugins] to do a lot of useful things,\ne.g. to find errors automatically insert vendor prefixes.\n\n**Support / Discussion:** [Gitter](https://gitter.im/postcss/postcss)<br>\n**Twitter account:**      [@postcss](https://twitter.com/postcss)<br>\n**VK.com page:**          [postcss](https://vk.com/postcss)<br>\n**中文翻译**:              [`README-cn.md`](./README-cn.md)\n\nFor PostCSS commercial support (consulting, improving the front-end culture\nof your company, PostCSS plugins), contact [Evil Martians](https://evilmartians.com/?utm_source=postcss)\nat <surrender@evilmartians.com>.\n\n[Abstract Syntax Tree]: https://en.wikipedia.org/wiki/Abstract_syntax_tree\n[Autoprefixer]:         https://github.com/postcss/autoprefixer\n[plugins]:              https://github.com/postcss/postcss#plugins\n\n<a href=\"https://evilmartians.com/?utm_source=postcss\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n## Plugins\n\nCurrently, PostCSS has more than 200 plugins. You can find all of the plugins\nin the [plugins list] or in the [searchable catalog]. Below is a list\nof our favorite plugins — the best demonstrations of what can be built\non top of PostCSS.\n\nIf you have any new ideas, [PostCSS plugin development] is really easy.\n\n[searchable catalog]: http://postcss.parts\n[plugins list]:       https://github.com/postcss/postcss/blob/master/docs/plugins.md\n\n### Solve Global CSS Problem\n\n* [`postcss-use`] allows you to explicitly set PostCSS plugins within CSS\n  and execute them only for the current file.\n* [`postcss-modules`] and [`react-css-modules`] automatically isolate\n  selectors within components.\n* [`postcss-autoreset`] is an alternative to using a global reset\n  that is better for isolatable components.\n* [`postcss-initial`] adds `all: initial` support, which resets\n  all inherited styles.\n* [`cq-prolyfill`] adds container query support, allowing styles that respond\n  to the width of the parent.\n\n### Use Future CSS, Today\n\n* [`autoprefixer`] adds vendor prefixes, using data from Can I Use.\n* [`postcss-preset-env`] allows you to use future CSS features today.\n\n### Better CSS Readability\n\n* [`precss`] contains plugins for Sass-like features, like variables, nesting,\n  and mixins.\n* [`postcss-sorting`] sorts the content of rules and at-rules.\n* [`postcss-utilities`] includes the most commonly used shortcuts and helpers.\n* [`short`] adds and extends numerous shorthand properties.\n\n### Images and Fonts\n\n* [`postcss-assets`] inserts image dimensions and inlines files.\n* [`postcss-sprites`] generates image sprites.\n* [`font-magician`] generates all the `@font-face` rules needed in CSS.\n* [`postcss-inline-svg`] allows you to inline SVG and customize its styles.\n* [`postcss-write-svg`] allows you to write simple SVG directly in your CSS.\n\n### Linters\n\n* [`stylelint`] is a modular stylesheet linter.\n* [`stylefmt`] is a tool that automatically formats CSS\n  according `stylelint` rules.\n* [`doiuse`] lints CSS for browser support, using data from Can I Use.\n* [`colorguard`] helps you maintain a consistent color palette.\n\n### Other\n\n* [`postcss-rtl`] combines both-directional (left-to-right and right-to-left) styles in one CSS file.\n* [`cssnano`] is a modular CSS minifier.\n* [`lost`] is a feature-rich `calc()` grid system.\n* [`rtlcss`] mirrors styles for right-to-left locales.\n\n[PostCSS plugin development]:   https://github.com/postcss/postcss/blob/master/docs/writing-a-plugin.md\n[`postcss-inline-svg`]:         https://github.com/TrySound/postcss-inline-svg\n[`postcss-preset-env`]:         https://github.com/jonathantneal/postcss-preset-env\n[`react-css-modules`]:          https://github.com/gajus/react-css-modules\n[`postcss-autoreset`]:          https://github.com/maximkoretskiy/postcss-autoreset\n[`postcss-write-svg`]:          https://github.com/jonathantneal/postcss-write-svg\n[`postcss-utilities`]:          https://github.com/ismamz/postcss-utilities\n[`postcss-initial`]:            https://github.com/maximkoretskiy/postcss-initial\n[`postcss-sprites`]:            https://github.com/2createStudio/postcss-sprites\n[`postcss-modules`]:            https://github.com/outpunk/postcss-modules\n[`postcss-sorting`]:            https://github.com/hudochenkov/postcss-sorting\n[`postcss-assets`]:             https://github.com/assetsjs/postcss-assets\n[`font-magician`]:              https://github.com/jonathantneal/postcss-font-magician\n[`autoprefixer`]:               https://github.com/postcss/autoprefixer\n[`cq-prolyfill`]:               https://github.com/ausi/cq-prolyfill\n[`postcss-rtl`]:                https://github.com/vkalinichev/postcss-rtl\n[`postcss-use`]:                https://github.com/postcss/postcss-use\n[`css-modules`]:                https://github.com/css-modules/css-modules\n[`colorguard`]:                 https://github.com/SlexAxton/css-colorguard\n[`stylelint`]:                  https://github.com/stylelint/stylelint\n[`stylefmt`]:                   https://github.com/morishitter/stylefmt\n[`cssnano`]:                    http://cssnano.co\n[`precss`]:                     https://github.com/jonathantneal/precss\n[`doiuse`]:                     https://github.com/anandthakker/doiuse\n[`rtlcss`]:                     https://github.com/MohammadYounes/rtlcss\n[`short`]:                      https://github.com/jonathantneal/postcss-short\n[`lost`]:                       https://github.com/peterramsing/lost\n\n## Syntaxes\n\nPostCSS can transform styles in any syntax, not just CSS.\nIf there is not yet support for your favorite syntax,\nyou can write a parser and/or stringifier to extend PostCSS.\n\n* [`sugarss`] is a indent-based syntax like Sass or Stylus.\n* [`postcss-syntax`] switch syntax automatically by file extensions.\n* [`postcss-html`] parsing styles in `<style>` tags of HTML-like files.\n* [`postcss-markdown`] parsing styles in code blocks of Markdown files.\n* [`postcss-jsx`] parsing CSS in template / object literals of source files.\n* [`postcss-styled`] parsing CSS in template literals of source files.\n* [`postcss-scss`] allows you to work with SCSS\n  *(but does not compile SCSS to CSS)*.\n* [`postcss-sass`] allows you to work with Sass\n    *(but does not compile Sass to CSS)*.\n* [`postcss-less`] allows you to work with Less\n  *(but does not compile LESS to CSS)*.\n* [`postcss-less-engine`] allows you to work with Less\n  *(and DOES compile LESS to CSS using true Less.js evaluation)*.\n* [`postcss-js`] allows you to write styles in JS or transform\n  React Inline Styles, Radium or JSS.\n* [`postcss-safe-parser`] finds and fixes CSS syntax errors.\n* [`midas`] converts a CSS string to highlighted HTML.\n\n[`postcss-less-engine`]: https://github.com/Crunch/postcss-less\n[`postcss-safe-parser`]: https://github.com/postcss/postcss-safe-parser\n[`postcss-syntax`]:      https://github.com/gucong3000/postcss-syntax\n[`postcss-html`]:        https://github.com/gucong3000/postcss-html\n[`postcss-markdown`]:    https://github.com/gucong3000/postcss-markdown\n[`postcss-jsx`]:         https://github.com/gucong3000/postcss-jsx\n[`postcss-styled`]:      https://github.com/gucong3000/postcss-styled\n[`postcss-scss`]:        https://github.com/postcss/postcss-scss\n[`postcss-sass`]:        https://github.com/AleshaOleg/postcss-sass\n[`postcss-less`]:        https://github.com/webschik/postcss-less\n[`postcss-js`]:          https://github.com/postcss/postcss-js\n[`sugarss`]:             https://github.com/postcss/sugarss\n[`midas`]:               https://github.com/ben-eb/midas\n\n## Articles\n\n* [Some things you may think about PostCSS… and you might be wrong](http://julian.io/some-things-you-may-think-about-postcss-and-you-might-be-wrong)\n* [What PostCSS Really Is; What It Really Does](http://davidtheclark.com/its-time-for-everyone-to-learn-about-postcss)\n* [PostCSS Guides](http://webdesign.tutsplus.com/series/postcss-deep-dive--cms-889)\n\nMore articles and videos you can find on [awesome-postcss](https://github.com/jjaderg/awesome-postcss) list.\n\n## Books\n\n* [Mastering PostCSS for Web Design](https://www.packtpub.com/web-development/mastering-postcss-web-design) by Alex Libby, Packt. (June 2016)\n\n## Usage\n\nYou can start using PostCSS in just two steps:\n\n1. Find and add PostCSS extensions for your build tool.\n2. [Select plugins] and add them to your PostCSS process.\n\n[Select plugins]: http://postcss.parts\n\n### Webpack\n\nUse [`postcss-loader`] in `webpack.config.js`:\n\n```js\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                exclude: /node_modules/,\n                use: [\n                    {\n                        loader: 'style-loader',\n                    },\n                    {\n                        loader: 'css-loader',\n                        options: {\n                            importLoaders: 1,\n                        }\n                    },\n                    {\n                        loader: 'postcss-loader'\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\nThen create `postcss.config.js`:\n\n```js\nmodule.exports = {\n    plugins: [\n        require('precss'),\n        require('autoprefixer')\n    ]\n}\n```\n\n[`postcss-loader`]: https://github.com/postcss/postcss-loader\n\n### Gulp\n\nUse [`gulp-postcss`] and [`gulp-sourcemaps`].\n\n```js\ngulp.task('css', function () {\n    var postcss    = require('gulp-postcss');\n    var sourcemaps = require('gulp-sourcemaps');\n\n    return gulp.src('src/**/*.css')\n        .pipe( sourcemaps.init() )\n        .pipe( postcss([ require('precss'), require('autoprefixer') ]) )\n        .pipe( sourcemaps.write('.') )\n        .pipe( gulp.dest('build/') );\n});\n```\n\n[`gulp-sourcemaps`]: https://github.com/floridoo/gulp-sourcemaps\n[`gulp-postcss`]:    https://github.com/postcss/gulp-postcss\n\n### npm run / CLI\n\nTo use PostCSS from your command-line interface or with npm scripts\nthere is [`postcss-cli`].\n\n```sh\npostcss --use autoprefixer -c options.json -o main.css css/*.css\n```\n\n[`postcss-cli`]: https://github.com/postcss/postcss-cli\n\n### Browser\n\nIf you want to compile CSS string in browser (for instance, in live edit\ntools like CodePen), just use [Browserify] or [webpack]. They will pack\nPostCSS and plugins files into a single file.\n\nTo apply PostCSS plugins to React Inline Styles, JSS, Radium\nand other [CSS-in-JS], you can use [`postcss-js`] and transforms style objects.\n\n```js\nvar postcss  = require('postcss-js');\nvar prefixer = postcss.sync([ require('autoprefixer') ]);\n\nprefixer({ display: 'flex' }); //=> { display: ['-webkit-box', '-webkit-flex', '-ms-flexbox', 'flex'] }\n```\n\n[`postcss-js`]: https://github.com/postcss/postcss-js\n[Browserify]:   http://browserify.org/\n[CSS-in-JS]:    https://github.com/MicheleBertoli/css-in-js\n[webpack]:      https://webpack.github.io/\n\n### Runners\n\n* **Grunt**: [`grunt-postcss`](https://github.com/nDmitry/grunt-postcss)\n* **HTML**: [`posthtml-postcss`](https://github.com/posthtml/posthtml-postcss)\n* **Stylus**: [`poststylus`](https://github.com/seaneking/poststylus)\n* **Rollup**: [`rollup-plugin-postcss`](https://github.com/egoist/rollup-plugin-postcss)\n* **Brunch**: [`postcss-brunch`](https://github.com/brunch/postcss-brunch)\n* **Broccoli**: [`broccoli-postcss`](https://github.com/jeffjewiss/broccoli-postcss)\n* **Meteor**: [`postcss`](https://atmospherejs.com/juliancwirko/postcss)\n* **ENB**: [`enb-postcss`](https://github.com/awinogradov/enb-postcss)\n* **Taskr**: [`taskr-postcss`](https://github.com/lukeed/taskr/tree/master/packages/postcss)\n* **Start**: [`start-postcss`](https://github.com/start-runner/postcss)\n* **Connect/Express**: [`postcss-middleware`](https://github.com/jedmao/postcss-middleware)\n\n### JS API\n\nFor other environments, you can use the JS API:\n\n```js\nconst fs = require('fs');\nconst postcss = require('postcss');\nconst precss = require('precss');\nconst autoprefixer = require('autoprefixer');\n\nfs.readFile('src/app.css', (err, css) => {\n    postcss([precss, autoprefixer])\n        .process(css, { from: 'src/app.css', to: 'dest/app.css' })\n        .then(result => {\n            fs.writeFile('dest/app.css', result.css, () => true);\n            if ( result.map ) {\n                fs.writeFile('dest/app.css.map', result.map, () => true);\n            }\n        });\n});\n```\n\nRead the [PostCSS API documentation] for more details about the JS API.\n\nAll PostCSS runners should pass [PostCSS Runner Guidelines].\n\n[PostCSS Runner Guidelines]: https://github.com/postcss/postcss/blob/master/docs/guidelines/runner.md\n[PostCSS API documentation]: http://api.postcss.org/postcss.html\n\n### Options\n\nMost PostCSS runners accept two parameters:\n\n* An array of plugins.\n* An object of options.\n\nCommon options:\n\n* `syntax`: an object providing a syntax parser and a stringifier.\n* `parser`: a special syntax parser (for example, [SCSS]).\n* `stringifier`: a special syntax output generator (for example, [Midas]).\n* `map`: [source map options].\n* `from`: the input file name (most runners set it automatically).\n* `to`: the output file name (most runners set it automatically).\n\n[source map options]: https://github.com/postcss/postcss/blob/master/docs/source-maps.md\n[Midas]:              https://github.com/ben-eb/midas\n[SCSS]:               https://github.com/postcss/postcss-scss\n\n## Editors & IDE Integration\n\n### Atom\n\n* [`language-postcss`] adds PostCSS and [SugarSS] highlight.\n* [`source-preview-postcss`] previews your output CSS in a separate, live pane.\n\n[SugarSS]: https://github.com/postcss/sugarss\n\n### Sublime Text\n\n* [`Syntax-highlighting-for-PostCSS`] adds PostCSS highlight.\n\n[`Syntax-highlighting-for-PostCSS`]: https://github.com/hudochenkov/Syntax-highlighting-for-PostCSS\n[`source-preview-postcss`]:          https://atom.io/packages/source-preview-postcss\n[`language-postcss`]:                https://atom.io/packages/language-postcss\n\n### Vim\n\n* [`postcss.vim`] adds PostCSS highlight.\n\n[`postcss.vim`]: https://github.com/stephenway/postcss.vim\n\n### WebStorm\n\nWebStorm 2016.3 [has] built-in PostCSS support.\n\n[has]: https://blog.jetbrains.com/webstorm/2016/08/webstorm-2016-3-early-access-preview/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss.git"
  },
  "types": "lib/postcss.d.ts",
  "version": "6.0.23"
}
